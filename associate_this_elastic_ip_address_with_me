#!/bin/bash
# Associates an elastic ip address to the EC2 instance on which this script runs.
# The address can be specified as a hostname as long as that resolves to a
# valid elastic ip address

die() {
  echo "$1" >&2
  exit 1
}

if [ $# -ne 1 ]; then
  die "Usage: $0 <host_or_ip_address>"
fi

HOST_OR_IP_ADDRESS="${1}"

matches_ip_address() {
  if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    return 0
  else
    return 1
  fi
}

resolve_hostname() {
  [ $# -ne 1 ] && die "Usage: $0 <hostname>"
  local host_output
  host_output=$(host $1)
  [ $? -ne 0 ] && return 1
  local ip_address
  ip_address=$(echo "$host_output" | awk '/has address/ { print $NF }')
  if  matches_ip_address $ip_address; then
    echo $ip_address
  else
    return 1
  fi
}

if matches_ip_address $HOST_OR_IP_ADDRESS; then
  THE_ELASTIC_IP=$HOST_OR_IP_ADDRESS
else
  THE_ELASTIC_IP=$(resolve_hostname $HOST_OR_IP_ADDRESS )
  [ $? -ne 0 ] && die "Cannot resolve hostname $HOST_OR_IP_ADDRESS"
fi


# Fetch the instance ID and region from instance metadata
MY_INSTANCE_ID=$(IMDSCurl latest/meta-data/instance-id)

if ! [[ $MY_INSTANCE_ID =~ ^i-[0-9a-f]+$ ]]; then
  die "Error: Failed to retrieve instance ID."
fi

MY_REGION=$(IMDSCurl latest/dynamic/instance-identity/document | jq -r .region)

if ! [[ $MY_REGION =~ ^[a-z]{2}-[a-z]+-[1-9]$ ]]; then
  die "Error: Failed to retrieve my aws region."
fi

# Attach the Elastic IP to myself
aws ec2 associate-address --instance-id $MY_INSTANCE_ID --public-ip $THE_ELASTIC_IP --region $MY_REGION
